// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2021 16:14:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          stack_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module stack_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bsr;
reg clk;
reg [15:0] dat;
reg reset;
reg ret;
// wires                                               
wire [15:0] out;

// assign statements (if any)                          
stack_test i1 (
// port map - connection between master ports and signals/registers   
	.bsr(bsr),
	.clk(clk),
	.dat(dat),
	.out(out),
	.reset(reset),
	.ret(ret)
);
initial 
begin 
#200000 $stop;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
	reset = #10000 1'b0;
end 

// bsr
initial
begin
	bsr = 1'b0;
	bsr = #20000 1'b1;
	bsr = #30000 1'b0;
	bsr = #40000 1'b1;
	bsr = #20000 1'b0;
end 

// ret
initial
begin
	ret = 1'b0;
	ret = #70000 1'b1;
	ret = #20000 1'b0;
	ret = #40000 1'b1;
	ret = #20000 1'b0;
end 
// dat[ 15 ]
initial
begin
	dat[15] = 1'b0;
end 
// dat[ 14 ]
initial
begin
	dat[14] = 1'b0;
end 
// dat[ 13 ]
initial
begin
	dat[13] = 1'b0;
end 
// dat[ 12 ]
initial
begin
	dat[12] = 1'b0;
end 
// dat[ 11 ]
initial
begin
	dat[11] = 1'b0;
end 
// dat[ 10 ]
initial
begin
	dat[10] = 1'b0;
end 
// dat[ 9 ]
initial
begin
	dat[9] = 1'b0;
	dat[9] = #90000 1'b1;
	dat[9] = #40000 1'b0;
end 
// dat[ 8 ]
initial
begin
	dat[8] = 1'b0;
	dat[8] = #20000 1'b1;
	dat[8] = #30000 1'b0;
	dat[8] = #40000 1'b1;
	dat[8] = #40000 1'b0;
end 
// dat[ 7 ]
initial
begin
	dat[7] = 1'b0;
end 
// dat[ 6 ]
initial
begin
	dat[6] = 1'b0;
end 
// dat[ 5 ]
initial
begin
	dat[5] = 1'b0;
end 
// dat[ 4 ]
initial
begin
	dat[4] = 1'b0;
end 
// dat[ 3 ]
initial
begin
	dat[3] = 1'b0;
end 
// dat[ 2 ]
initial
begin
	dat[2] = 1'b0;
end 
// dat[ 1 ]
initial
begin
	dat[1] = 1'b0;
end 
// dat[ 0 ]
initial
begin
	dat[0] = 1'b0;
end 
endmodule

